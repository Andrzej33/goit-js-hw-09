{"mappings":"YAAA,SAASA,EAAcC,EAAUC,GAe/B,OAdgB,IAAIC,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAACH,WAAUC,UAGnBG,EAAO,CAACJ,WAAUC,S,GAInBA,E,IASP,IAAMQ,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,UAAU,SAAAC,GAC9BA,EAAIC,iBAEJ,IAAK,IAAIC,EAAI,EAAGA,EAAIC,EAAiBC,MAAOF,IAG1ChB,EAAcgB,EAAI,EAAIG,EAAeD,MAAQF,EAAII,EAAgBF,OAClEG,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBqB,QAAQC,IAAI,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAE3DwB,OAAM,SAAAJ,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBqB,QAAQC,IAAI,sBAAqCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAOzDQ,EAAKiB,O,IAIP,IAAMP,EAAkBV,EAAKR,MACvBiB,EAAiBT,EAAKkB,KACtBX,EAAmBP,EAAKmB,M","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    \n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n        // Fulfill\n      } else {\n        reject({position, delay});\n        // Reject\n      }\n      //  \n    }, delay);\n  })\n  return promise\n}\n//  const p = createPromise(4,6000)\n// console.log(promise)\n\n// p.then(onSucces).catch(onError)\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', evt => {\n  evt.preventDefault();\n\n  for (let i = 0; i < amountDenotation.value; i++) {\n// console.log(stepDenotation.value)\n// console.log(delayDenotation.value)\n    createPromise(i + 1,  stepDenotation.value * i + delayDenotation.value)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\n\n\n    \n  }\n  form.reset()\n})\n\n\nconst delayDenotation = form.delay;\nconst stepDenotation = form.step;\nconst amountDenotation = form.amount;\n// const delayDenotation = form.step;\n// console.log(form)\n\n\n\n//  const promise = new Promise((resolve, reject) => {\n//   const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve(\"Success! Value passed to resolve function\");\n//         // Fulfill\n//       } else {\n//         reject(\"Error! Error passed to reject function\");\n//         // Reject\n//       }\n//       //  \n//     }, 2000);\n//  })\n  \n\n// promise.then(res => {\n//   console.log(res)\n// }, error => {\n//   console.log(error);\n// }\n// )\n\n\n// function promiseTest(delay) { \n//   setTimeout(()=>{})\n// }\n\n// function createPromise(amount) {\n  \n// }"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$form","document","querySelector","addEventListener","evt","preventDefault","i","$ce04d3a99e08e73b$var$amountDenotation","value","$ce04d3a99e08e73b$var$stepDenotation","$ce04d3a99e08e73b$var$delayDenotation","then","param","console","log","concat","catch","reset","step","amount"],"version":3,"file":"03-promises.f2f33ab1.js.map"}