{"mappings":"YAsBA,IAAMA,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,UAAU,SAAAC,GAC9BA,EAAIC,gB,IAKkBL,EAAKM,MACNN,EAAKO,KACHP,EAAKQ,M","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    \n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n        // Fulfill\n      } else {\n        reject({position, delay});\n        // Reject\n      }\n      //  \n    }, delay);\n  })\n  return promise\n}\n//  const p = createPromise(4,6000)\n// console.log(promise)\n\n// p.then(onSucces).catch(onError)\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', evt => {\n  evt.preventDefault();\n\n})\n\n\nconst delayDenotation = form.delay;\nconst stepDenotation = form.step;\nconst amountDenotation = form.amount;\n// const delayDenotation = form.step;\n// console.log(form)\n\n\n\n//  const promise = new Promise((resolve, reject) => {\n//   const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve(\"Success! Value passed to resolve function\");\n//         // Fulfill\n//       } else {\n//         reject(\"Error! Error passed to reject function\");\n//         // Reject\n//       }\n//       //  \n//     }, 2000);\n//  })\n  \n\n// promise.then(res => {\n//   console.log(res)\n// }, error => {\n//   console.log(error);\n// }\n// )\n\n\n// function promiseTest(delay) { \n//   setTimeout(()=>{})\n// }\n\n// function createPromise(amount) {\n  \n// }"],"names":["$ce04d3a99e08e73b$var$form","document","querySelector","addEventListener","evt","preventDefault","delay","step","amount"],"version":3,"file":"03-promises.d049e5b9.js.map"}